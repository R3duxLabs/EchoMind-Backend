diff --git a/app/main.py b/app/main.py
index 574a29d..0cd88b3 100644
--- a/app/main.py
+++ b/app/main.py
@@ -97,6 +97,8 @@ setup_cors(app)
 # Serve static files
 app.mount("/static", StaticFiles(directory="app/static"), name="static")
 
+# Route for claude-code-chat is defined in app/routes/frontend.py
+
 # ----------------------------- Response Models -----------------------------
 
 class APIResponse(BaseModel):
@@ -293,6 +295,9 @@ async def startup_event():
         "environment": "development"
     })
     
+    # Pickaxe is optional and will run in standalone mode if not configured
+    logger.info("Running with optional Pickaxe integration in standalone mode")
+
 
 # Only execute this if running the script directly
 if __name__ == "__main__":
diff --git a/app/routes/frontend.py b/app/routes/frontend.py
index 048ae68..dff4f56 100644
--- a/app/routes/frontend.py
+++ b/app/routes/frontend.py
@@ -71,6 +71,14 @@ class FrontendDataResponse(BaseModel):
 
 # --------------------- Frontend Routes ---------------------
 
+@router.get("/claude-code-chat")
+async def serve_claude_code_chat():
+    """Serve the Claude Code chat interface HTML page"""
+    from fastapi.responses import HTMLResponse
+    with open("app/static/claude-code-chat.html", "r") as f:
+        content = f.read()
+    return HTMLResponse(content=content)
+
 @router.get("/config", response_model=FrontendDataResponse)
 async def get_frontend_config(
     db: AsyncSession = Depends(get_db),
diff --git a/app/utils/personality_seed.py b/app/utils/personality_seed.py
index f653eab..de6ba6d 100644
--- a/app/utils/personality_seed.py
+++ b/app/utils/personality_seed.py
@@ -248,42 +248,66 @@ async def seed_personality_profiles(db: AsyncSession) -> None:
         db: The database session
     """
     # Check if we already have profiles
-    result = await db.execute(select(PersonalityProfile))
-    existing_profiles = result.scalars().all()
-    
-    if existing_profiles:
-        logger.info(f"Found {len(existing_profiles)} existing personality profiles, skipping seed")
-        return
+    try:
+        result = await db.execute(select(PersonalityProfile))
+        existing_profiles = result.scalars().all()
         
-    logger.info("Seeding personality profiles...")
-    
-    for profile_data in DEFAULT_PROFILES:
-        # Convert agent types to strings
-        compatible_agent_types = [
-            agent_type.value if hasattr(agent_type, "value") else agent_type
-            for agent_type in profile_data["compatible_agent_types"]
-        ]
+        if existing_profiles:
+            logger.info(f"Found {len(existing_profiles)} existing personality profiles, skipping seed")
+            return
+            
+        logger.info("Seeding personality profiles...")
         
-        # Create profile
-        profile = PersonalityProfile(
-            name=profile_data["name"],
-            description=profile_data["description"],
-            primary_traits=profile_data["primary_traits"],
-            secondary_traits=profile_data["secondary_traits"],
-            communication_style=profile_data["communication_style"],
-            emotional_tone=profile_data["emotional_tone"],
-            compatible_agent_types=compatible_agent_types,
-            verbosity_level=profile_data["verbosity_level"],
-            technical_level=profile_data["technical_level"],
-            formality_level=profile_data["formality_level"],
-            adapts_to_user=profile_data["adapts_to_user"],
-            adaptation_rate=profile_data["adaptation_rate"],
-            prompt_modifiers=profile_data["prompt_modifiers"],
-            is_system=profile_data["is_system"],
-            is_active=True
-        )
+        for profile_data in DEFAULT_PROFILES:
+            # Map custom agent types to the ones defined in AgentType enum
+            agent_type_mapping = {
+                "ASSISTANT": "assistant",
+                "THERAPIST": "specialized",
+                "COACH": "specialized",
+                "EXPERT": "specialized",
+                "MEDIATOR": "specialized",
+                "CRITIC": "specialized",
+                "CREATIVE": "specialized",
+                "BRIDGE": "specialized",
+                "PARENT": "specialized",
+                "FRIEND": "specialized"
+            }
+            
+            # Convert agent types to strings using the mapping
+            compatible_agent_types = []
+            for agent_type in profile_data["compatible_agent_types"]:
+                if hasattr(agent_type, "value"):
+                    agent_type_name = agent_type.value
+                else:
+                    agent_type_name = agent_type.name if hasattr(agent_type, "name") else str(agent_type)
+                
+                # Map to the new agent types or keep the original if not in the mapping
+                mapped_type = agent_type_mapping.get(agent_type_name, "specialized")
+                compatible_agent_types.append(mapped_type)
+            
+            # Create profile
+            profile = PersonalityProfile(
+                name=profile_data["name"],
+                description=profile_data["description"],
+                primary_traits=profile_data["primary_traits"],
+                secondary_traits=profile_data["secondary_traits"],
+                communication_style=profile_data["communication_style"].value,
+                emotional_tone=profile_data["emotional_tone"].value,
+                compatible_agent_types=compatible_agent_types,
+                verbosity_level=profile_data["verbosity_level"],
+                technical_level=profile_data["technical_level"],
+                formality_level=profile_data["formality_level"],
+                adapts_to_user=profile_data["adapts_to_user"],
+                adaptation_rate=profile_data["adaptation_rate"],
+                prompt_modifiers=profile_data["prompt_modifiers"],
+                is_system=profile_data["is_system"],
+                is_active=True
+            )
+            
+            db.add(profile)
         
-        db.add(profile)
-    
-    await db.commit()
-    logger.info(f"Successfully seeded {len(DEFAULT_PROFILES)} personality profiles")
\ No newline at end of file
+        await db.commit()
+        logger.info(f"Successfully seeded {len(DEFAULT_PROFILES)} personality profiles")
+    except Exception as e:
+        logger.error(f"Error seeding personality profiles: {str(e)}")
+        # Do not raise exception, allow the application to continue running
\ No newline at end of file
diff --git a/app/routes/pickaxe.py b/app/routes/pickaxe.py
index 400ec23..661b4a8 100644
--- a/app/routes/pickaxe.py
+++ b/app/routes/pickaxe.py
@@ -117,8 +117,8 @@ async def list_knowledge_bases(
     api_key: str = Depends(get_api_key)
 ):
     """List all knowledge bases in the workspace"""
-    if not (PICKAXE_API_KEY and PICKAXE_WORKSPACE_ID):
-        return []
+    # Pickaxe integration is optional - return empty list if not using it
+    return []
         
     async with PickaxeClient() as client:
         response = await client.list_knowledge_bases()
EOF < /dev/null
